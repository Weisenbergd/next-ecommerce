generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id])
  variantGroups VariantGroup[]
  variants      Variant[]
}

model VariantGroup {
  id        Int       @id @default(autoincrement())
  productId Int
  colorId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  color     Color     @relation(fields: [colorId], references: [id])
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  images    Image[]
  variants  Variant[]
}

model Variant {
  id             Int          @id @default(autoincrement())
  variantGroupId Int
  sizeId         Int
  stock          Int
  price          Float
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  variantGroup   VariantGroup @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)
  size           Size         @relation(fields: [sizeId], references: [id])
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int
  cartItem       CartItem[]
}

model Image {
  id             Int          @id @default(autoincrement())
  url            String
  productId      Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  variantGroupId Int
  variantGroup   VariantGroup @relation(fields: [variantGroupId], references: [id], onDelete: Cascade)
}

model Size {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  variants  Variant[]
}

model Color {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  variantGroups VariantGroup[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  variantId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id])
  variant   Variant  @relation(fields: [variantId], references: [id])
}
